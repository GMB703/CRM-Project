generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                       String                    @id @default(cuid())
  name                     String
  code                     String                    @unique
  logo                     String?
  primaryColor             String?
  settings                 Json?
  isActive                 Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  users                    User[]
  clients                  Client[]
  projects                 Project[]
  estimates                Estimate[]
  estimateTemplates        EstimateTemplate[]
  userOrganizations        UserOrganization[]
  organizationSettings     OrganizationSettings?
  catalogItems             CatalogItem[]
  estimateLineItems        EstimateLineItem[]
  estimatePayments         EstimatePayment[]
  leadStages               LeadStage[]
  leadSourceConfigs        LeadSourceConfig[]
  leadActivities           LeadActivity[]
  messageTemplates         MessageTemplate[]
  communicationChannels    CommunicationChannel[]
  messageHistory           MessageHistory[]
  communicationAutomations CommunicationAutomation[]

  @@map("organizations")
}

model OrganizationSettings {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Theme settings
  primaryColor   String? @default("#1976d2")
  secondaryColor String? @default("#dc004e")
  accentColor    String? @default("#f50057")
  logoUrl        String?
  faviconUrl     String?

  // Branding settings
  companyName  String?
  contactEmail String?
  contactPhone String?
  address      Json?

  // Feature flags
  enabledFeatures Json? @default("[\"crm\", \"projects\"]")

  // UI preferences
  sidebarCollapsed Boolean? @default(false)
  darkMode         Boolean? @default(false)
  language         String?  @default("en")
  timezone         String?  @default("UTC")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organization_settings")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String
  password                String
  firstName               String
  lastName                String
  phone                   String?
  avatar                  String?
  role                    UserRole                  @default(USER)
  organizationRole        OrganizationRole          @default(MEMBER)
  isActive                Boolean                   @default(true)
  lastLoginAt             DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  organizationId          String
  organization            Organization              @relation(fields: [organizationId], references: [id])
  userOrganizations       UserOrganization[]
  clientPortalMessages    ClientPortalMessage[]
  teamChatMessages        TeamChatMessage[]
  communications          Communication[]
  estimates               Estimate[]                @relation("EstimateCreator")
  approvedEstimates       Estimate[]                @relation("EstimateApprover")
  estimateTemplates       EstimateTemplate[]
  invoices                Invoice[]
  notes                   Note[]
  notifications           Notification[]
  createdProjects         Project[]                 @relation("ProjectCreator")
  assignedTasks           Task[]
  assignedProjects        Project[]                 @relation("ProjectAssignee")
  assignedLeads           Client[]                  @relation("LeadAssignee")
  leadActivities          LeadActivity[]            @relation("LeadActivityUser")
  catalogItems            CatalogItem[]
  estimateApprovals       EstimateApproval[]
  estimateEmailLogs       EstimateEmailLog[]
  createdMessageTemplates MessageTemplate[]         @relation("MessageTemplateCreator")
  sentMessages            MessageHistory[]          @relation("MessageSender")
  createdAutomations      CommunicationAutomation[] @relation("AutomationCreator")

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, role])
  @@index([organizationId, isActive])
  @@index([email])
  @@map("users")
}

model UserOrganization {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  isActive       Boolean          @default(true)
  joinedAt       DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([organizationId, role])
  @@index([userId, isActive])
  @@map("user_organizations")
}

model Client {
  id                   String                @id @default(cuid())
  firstName            String
  lastName             String
  email                String
  phone                String?
  company              String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  source               LeadSource?
  tags                 String[]
  status               ClientStatus          @default(ACTIVE)
  noteText             String?
  leadStage            String?
  assignedUserId       String?
  leadScore            Int?
  lastContactedAt      DateTime?
  nextFollowUpAt       DateTime?
  convertedAt          DateTime?
  estimatedValue       Decimal?              @db.Decimal(10, 2)
  actualValue          Decimal?              @db.Decimal(10, 2)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  organization         Organization          @relation(fields: [organizationId], references: [id])
  assignedUser         User?                 @relation("LeadAssignee", fields: [assignedUserId], references: [id])
  leadActivities       LeadActivity[]
  clientPortalMessages ClientPortalMessage[]
  communications       Communication[]
  messageHistory       MessageHistory[]
  estimates            Estimate[]
  invoices             Invoice[]
  notes                Note[]
  projects             Project[]

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([organizationId, source])
  @@index([organizationId, leadStage])
  @@index([organizationId, assignedUserId])
  @@index([organizationId, nextFollowUpAt])
  @@index([organizationId, leadScore])
  @@map("clients")
}

model Project {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  status               ProjectStatus         @default(PLANNING)
  stage                ProjectStage          @default(INITIAL_CONTACT)
  startDate            DateTime?
  endDate              DateTime?
  budget               Decimal?              @db.Decimal(10, 2)
  actualCost           Decimal?              @db.Decimal(10, 2)
  location             String?
  priority             Priority              @default(MEDIUM)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  organization         Organization          @relation(fields: [organizationId], references: [id])
  clientId             String
  creatorId            String
  clientPortalMessages ClientPortalMessage[]
  teamChatMessages     TeamChatMessage[]
  changeOrders         ChangeOrder[]
  communications       Communication[]
  messageHistory       MessageHistory[]
  documents            Document[]
  estimates            Estimate[]
  invoices             Invoice[]
  notes                Note[]
  client               Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  creator              User                  @relation("ProjectCreator", fields: [creatorId], references: [id])
  tasks                Task[]
  assignees            User[]                @relation("ProjectAssignee")

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, stage])
  @@index([organizationId, priority])
  @@index([organizationId, isActive])
  @@index([organizationId, createdAt])
  @@index([clientId, organizationId])
  @@map("projects")
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus      @default(PENDING)
  priority       Priority        @default(MEDIUM)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Decimal?        @db.Decimal(5, 2)
  actualHours    Decimal?        @db.Decimal(5, 2)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectId      String
  assigneeId     String?
  checklist      ChecklistItem[]
  assignee       User?           @relation(fields: [assigneeId], references: [id])
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeLogs       TimeLog[]

  @@index([projectId])
  @@index([projectId, status])
  @@index([projectId, priority])
  @@index([projectId, dueDate])
  @@index([assigneeId])
  @@map("tasks")
}

model ChecklistItem {
  id          String    @id @default(cuid())
  title       String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int
  createdAt   DateTime  @default(now())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model TimeLog {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

model Estimate {
  id              String         @id @default(cuid())
  referenceNumber String // ES-001, ES-002, etc.
  title           String
  description     String?
  status          EstimateStatus @default(DRAFT)

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  clientId       String
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId      String?
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  creatorId      String
  creator        User         @relation("EstimateCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  approvedById   String?
  approvedBy     User?        @relation("EstimateApprover", fields: [approvedById], references: [id], onDelete: SetNull)

  // Dates
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime?
  approvedAt DateTime?
  sentAt     DateTime?

  // Financial
  subtotal    Decimal @default(0) @db.Decimal(10, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  taxAmount   Decimal @default(0) @db.Decimal(10, 2)
  totalAmount Decimal @default(0) @db.Decimal(10, 2)

  // Settings
  requiresApproval Boolean           @default(false)
  isTemplate       Boolean           @default(false)
  templateName     String?
  templateId       String?
  template         EstimateTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  // File Storage
  pdfPath        String?
  pdfGeneratedAt DateTime?

  // Payment
  paymentTerms      String?
  depositRequired   Boolean  @default(false)
  depositAmount     Decimal? @db.Decimal(10, 2)
  depositPercentage Decimal? @db.Decimal(5, 2)

  // Related Data
  lineItems EstimateLineItem[]
  payments  EstimatePayment[]
  approvals EstimateApproval[]
  emailLogs EstimateEmailLog[]
  contracts Contract[]

  @@unique([referenceNumber, organizationId])
  @@index([organizationId, status])
  @@index([clientId])
  @@index([creatorId])
}

model EstimateLineItem {
  id         String   @id @default(cuid())
  estimateId String
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  // Item Details
  itemName    String
  description String?
  sku         String?
  category    String?
  room        String?

  // Pricing
  quantity  Decimal @db.Decimal(10, 2)
  unit      String  @default("ea")
  unitCost  Decimal @db.Decimal(10, 2)
  markup    Decimal @default(0) @db.Decimal(5, 2)
  unitPrice Decimal @db.Decimal(10, 2)
  lineTotal Decimal @db.Decimal(10, 2)

  // Tax
  taxable Boolean  @default(true)
  taxRate Decimal? @db.Decimal(5, 2)

  // Organization
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Ordering
  sortOrder Int @default(0)

  // Catalog Reference
  catalogItemId String?
  catalogItem   CatalogItem? @relation(fields: [catalogItemId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([estimateId])
  @@index([catalogItemId])
}

model CatalogItem {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Item Details
  name        String
  description String?
  sku         String?
  category    String?

  // Default Pricing
  defaultCost   Decimal @db.Decimal(10, 2)
  defaultMarkup Decimal @default(0) @db.Decimal(5, 2)
  defaultPrice  Decimal @db.Decimal(10, 2)
  unit          String  @default("ea")

  // Settings
  isActive Boolean @default(true)
  taxable  Boolean @default(true)

  // Usage Tracking
  usageCount Int       @default(0)
  lastUsed   DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Relations
  lineItems EstimateLineItem[]

  @@unique([sku, organizationId])
  @@index([organizationId, category])
  @@index([organizationId, isActive])
}

model EstimateApproval {
  id         String   @id @default(cuid())
  estimateId String
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  // Approval Details
  status       ApprovalStatus
  comments     String?
  approvedById String
  approvedBy   User           @relation(fields: [approvedById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([estimateId])
}

model EstimatePayment {
  id         String   @id @default(cuid())
  estimateId String
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  // Payment Details
  amount      Decimal       @db.Decimal(10, 2)
  paymentType PaymentType
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime?
  paidDate    DateTime?

  // Payment Processing
  stripePaymentId String?
  paymentMethod   String?

  // Organization
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([estimateId])
  @@index([organizationId, status])
}

model EstimateEmailLog {
  id         String   @id @default(cuid())
  estimateId String
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  // Email Details
  toEmail  String
  subject  String
  sentAt   DateTime @default(now())
  sentById String
  sentBy   User     @relation(fields: [sentById], references: [id], onDelete: Cascade)

  // Status
  delivered Boolean @default(false)
  opened    Boolean @default(false)
  clicked   Boolean @default(false)

  @@index([estimateId])
}

model EstimateTemplate {
  id             String                     @id @default(cuid())
  name           String
  description    String?
  category       String?
  isDefault      Boolean                    @default(false)
  taxRate        Decimal                    @default(0) @db.Decimal(5, 4)
  terms          String?
  notes          String?
  isActive       Boolean                    @default(true)
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  organizationId String
  creatorId      String
  organization   Organization               @relation(fields: [organizationId], references: [id])
  creator        User                       @relation(fields: [creatorId], references: [id])
  estimates      Estimate[]
  lineItems      EstimateTemplateLineItem[]

  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([organizationId, category])
  @@map("estimate_templates")
}

model EstimateTemplateLineItem {
  id           String           @id @default(cuid())
  description  String
  serviceType  String?
  category     String?
  quantity     Decimal          @default(1) @db.Decimal(10, 3)
  unitPrice    Decimal          @db.Decimal(10, 2)
  laborHours   Decimal?         @db.Decimal(8, 2)
  materialCost Decimal?         @db.Decimal(10, 2)
  markup       Decimal?         @db.Decimal(5, 2)
  order        Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  templateId   String
  template     EstimateTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([templateId, order])
  @@map("estimate_template_line_items")
}

model Contract {
  id         String         @id @default(cuid())
  title      String
  content    String
  status     ContractStatus @default(DRAFT)
  signedAt   DateTime?
  signedBy   String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  estimateId String
  estimate   Estimate       @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Invoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  title         String
  description   String?
  amount        Decimal        @db.Decimal(10, 2)
  taxAmount     Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount   Decimal        @db.Decimal(10, 2)
  status        InvoiceStatus  @default(DRAFT)
  dueDate       DateTime?
  paidAt        DateTime?
  paymentMethod PaymentMethod?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectId     String
  clientId      String
  creatorId     String
  client        Client         @relation(fields: [clientId], references: [id])
  creator       User           @relation(fields: [creatorId], references: [id])
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@index([clientId])
  @@index([projectId])
  @@index([clientId, status])
  @@index([projectId, status])
  @@index([dueDate])
  @@index([createdAt])
  @@map("invoices")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Document {
  id         String       @id @default(cuid())
  name       String
  type       DocumentType
  url        String
  size       Int
  mimeType   String
  uploadedAt DateTime     @default(now())
  projectId  String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
  @@index([uploadedAt])
  @@map("documents")
}

model Communication {
  id             String                 @id @default(cuid())
  type           CommunicationType
  subject        String?
  content        String
  direction      CommunicationDirection @default(OUTBOUND)
  emailSubject   String?
  emailBody      String?
  smsBody        String?
  deliveryStatus String?                @default("PENDING")
  projectId      String?
  clientId       String
  userId         String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  client         Client                 @relation(fields: [clientId], references: [id])
  project        Project?               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User?                  @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([clientId, type])
  @@index([clientId, createdAt])
  @@index([projectId])
  @@index([userId])
  @@map("communications")
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?
  clientId  String?
  userId    String
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([projectId])
  @@index([userId])
  @@index([clientId, isPrivate])
  @@index([projectId, isPrivate])
  @@map("notes")
}

model ChangeOrder {
  id          String            @id @default(cuid())
  title       String
  description String
  amount      Decimal           @db.Decimal(10, 2)
  status      ChangeOrderStatus @default(PENDING)
  approvedAt  DateTime?
  approvedBy  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  projectId   String
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, status])
  @@index([createdAt])
  @@map("change_orders")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, isRead])
  @@index([userId, type])
  @@index([createdAt])
  @@map("notifications")
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model TeamChatMessage {
  id        String          @id @default(cuid())
  content   String
  type      ChatMessageType @default(TEXT)
  isEdited  Boolean         @default(false)
  editedAt  DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  projectId String
  userId    String
  fileUrl   String?
  fileName  String?
  fileType  String?
  project   Project         @relation(fields: [projectId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model ClientPortalMessage {
  id        String    @id @default(cuid())
  content   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clientId  String
  userId    String
  projectId String?
  client    Client    @relation(fields: [clientId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([projectId])
}

// Lead Management Tables
model LeadStage {
  id             String       @id @default(cuid())
  name           String // e.g., "New Lead", "Contacted", "Qualified", "Proposal Sent"
  description    String?
  color          String? // Hex color for UI display
  order          Int // Display order in pipeline
  isDefault      Boolean      @default(false)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, order])
  @@index([organizationId, isActive])
  @@map("lead_stages")
}

model LeadSourceConfig {
  id             String       @id @default(cuid())
  name           String // e.g., "Google Ads", "Facebook", "Trade Show", "Referral - John Smith"
  description    String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, isActive])
  @@map("lead_source_configs")
}

model LeadActivity {
  id             String           @id @default(cuid())
  type           LeadActivityType // CALL, EMAIL, MEETING, NOTE, STAGE_CHANGE, etc.
  title          String
  description    String?
  notes          String?
  outcome        String? // Call outcome, meeting result, etc.
  nextAction     String? // What's the next planned action
  scheduledAt    DateTime? // For scheduled activities
  completedAt    DateTime? // When activity was completed
  duration       Int? // Duration in minutes
  isCompleted    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  clientId       String
  userId         String // User who performed/recorded the activity
  organizationId String
  client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user           User             @relation("LeadActivityUser", fields: [userId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messageHistory MessageHistory[]

  @@index([clientId])
  @@index([userId])
  @@index([organizationId])
  @@index([organizationId, type])
  @@index([organizationId, createdAt])
  @@index([clientId, createdAt])
  @@index([userId, createdAt])
  @@map("lead_activities")
}

// Communication Hub Infrastructure
model MessageTemplate {
  id          String                  @id @default(cuid())
  name        String // Template name for identification
  description String? // What this template is for
  category    MessageTemplateCategory // EMAIL_MARKETING, FOLLOW_UP, PROPOSAL, etc.
  type        CommunicationType // EMAIL, SMS
  isActive    Boolean                 @default(true)

  // Template Content
  subject  String? // For email templates
  bodyText String // Plain text version
  bodyHtml String? // Rich HTML version for emails

  // Variables and Personalization
  variables Json? // JSON array of available variables like {{firstName}}, {{companyName}}

  // Usage Tracking
  usageCount Int       @default(0)
  lastUsedAt DateTime?

  // Organization Context
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation("MessageTemplateCreator", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messageHistory           MessageHistory[]
  communicationAutomations CommunicationAutomation[]

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, category])
  @@index([organizationId, type])
  @@index([organizationId, isActive])
  @@map("message_templates")
}

model CommunicationChannel {
  id        String            @id @default(cuid())
  name      String // Channel name (e.g., "Primary Email", "SMS Alerts")
  type      CommunicationType // EMAIL, SMS, PHONE
  isActive  Boolean           @default(true)
  isDefault Boolean           @default(false) // Default channel for this type

  // Configuration
  config   Json? // Channel-specific configuration (SMTP settings, SMS provider, etc.)
  priority Int   @default(1) // Channel priority for failover

  // Rate Limiting
  dailyLimit     Int? // Max messages per day
  monthlyLimit   Int? // Max messages per month
  currentDaily   Int  @default(0) // Current daily usage
  currentMonthly Int  @default(0) // Current monthly usage

  // Organization Context
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messageHistory           MessageHistory[]
  communicationAutomations CommunicationAutomation[]

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, type])
  @@index([organizationId, isActive])
  @@index([organizationId, isDefault])
  @@map("communication_channels")
}

model MessageHistory {
  id String @id @default(cuid())

  // Message Content
  subject  String? // Email subject or SMS title
  bodyText String // Plain text content
  bodyHtml String? // HTML content for emails

  // Message Metadata
  type      CommunicationType // EMAIL, SMS, PHONE
  direction CommunicationDirection @default(OUTBOUND)
  status    MessageStatus          @default(PENDING)

  // Delivery Tracking
  sentAt       DateTime?
  deliveredAt  DateTime?
  readAt       DateTime?
  clickedAt    DateTime?
  failedAt     DateTime?
  errorMessage String?

  // External Provider Data
  externalId     String? // Provider message ID (Twilio, SendGrid, etc.)
  externalStatus String? // Provider-specific status

  // Template Reference
  templateId        String?
  template          MessageTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateVariables Json? // Variables used to populate template

  // Channel Reference
  channelId String?
  channel   CommunicationChannel? @relation(fields: [channelId], references: [id], onDelete: SetNull)

  // Relationships
  clientId       String?
  client         Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  leadActivityId String?
  leadActivity   LeadActivity? @relation(fields: [leadActivityId], references: [id], onDelete: SetNull)

  // User Context
  userId         String? // User who sent the message
  user           User?        @relation("MessageSender", fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Contact Information
  recipientEmail String?
  recipientPhone String?
  recipientName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([clientId])
  @@index([projectId])
  @@index([userId])
  @@index([organizationId, type])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([clientId, createdAt])
  @@index([externalId])
  @@map("message_history")
}

model CommunicationAutomation {
  id          String  @id @default(cuid())
  name        String // Automation name
  description String?
  isActive    Boolean @default(true)

  // Trigger Configuration
  triggerType   AutomationTriggerType // LEAD_CREATED, STAGE_CHANGE, TASK_DUE, etc.
  triggerConfig Json? // Additional trigger configuration

  // Conditions
  conditions Json? // Conditions that must be met to execute

  // Actions
  templateId String? // Template to use
  template   MessageTemplate?      @relation(fields: [templateId], references: [id], onDelete: SetNull)
  channelId  String? // Channel to use
  channel    CommunicationChannel? @relation(fields: [channelId], references: [id], onDelete: SetNull)
  delay      Int                   @default(0) // Delay in minutes before sending

  // Organization Context
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation("AutomationCreator", fields: [createdById], references: [id])

  // Usage Tracking
  executionCount Int       @default(0)
  lastExecutedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([organizationId, triggerType])
  @@map("communication_automations")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISING
  COLD_CALL
  OTHER
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT // For leads not yet converted
  QUALIFIED // Qualified leads ready for proposal
  CONVERTED // Successfully converted to client
  LOST // Lost lead/opportunity
  UNQUALIFIED // Lead that didn't meet criteria
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectStage {
  INITIAL_CONTACT
  ESTIMATE_REQUESTED
  ESTIMATE_SENT
  CONTRACT_SIGNED
  DEMO_SCHEDULED
  DEMO_COMPLETED
  INSTALLATION_SCHEDULED
  INSTALLATION_IN_PROGRESS
  INSTALLATION_COMPLETED
  FINAL_INSPECTION
  PROJECT_COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EstimateStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

enum DiscountType {
  NONE
  PERCENTAGE
  FIXED_AMOUNT
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  STRIPE
  OTHER
}

enum DocumentType {
  BLUEPRINT
  PHOTO
  CONTRACT
  INVOICE
  ESTIMATE
  OTHER
}

enum CommunicationType {
  EMAIL
  SMS
  PHONE
  IN_PERSON
  OTHER
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
}

enum ChangeOrderStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum NotificationType {
  TASK_DUE
  PROJECT_UPDATE
  INVOICE_DUE
  ESTIMATE_ACCEPTED
  ESTIMATE_REJECTED
  PAYMENT_RECEIVED
  SYSTEM_ALERT
}

enum ChatMessageType {
  TEXT
  FILE
  IMAGE
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum PaymentType {
  DEPOSIT
  MILESTONE
  FINAL
  FULL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum LeadActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  STAGE_CHANGE
  TASK
  DEMO
  QUOTE_SENT
  FOLLOW_UP
  CONVERSION
  OTHER
}

enum MessageTemplateCategory {
  WELCOME
  FOLLOW_UP
  PROPOSAL
  REMINDER
  THANK_YOU
  MARKETING
  SUPPORT
  INVOICE
  ESTIMATE
  PROJECT_UPDATE
  LEAD_NURTURE
  APPOINTMENT
  CUSTOM
}

enum MessageStatus {
  PENDING
  QUEUED
  SENDING
  SENT
  DELIVERED
  READ
  CLICKED
  FAILED
  BOUNCED
  SPAM
  UNSUBSCRIBED
}

enum AutomationTriggerType {
  LEAD_CREATED
  LEAD_STAGE_CHANGE
  LEAD_ASSIGNED
  PROJECT_CREATED
  PROJECT_STATUS_CHANGE
  TASK_DUE
  ESTIMATE_SENT
  ESTIMATE_VIEWED
  ESTIMATE_ACCEPTED
  ESTIMATE_REJECTED
  INVOICE_SENT
  INVOICE_OVERDUE
  PAYMENT_RECEIVED
  CUSTOM_DATE
  INACTIVITY_PERIOD
}
