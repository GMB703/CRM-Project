generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                       String                    @id @default(uuid())
  name                     String
  code                     String                    @unique
  logo                     String?
  primaryColor             String?
  settings                 Json?
  isActive                 Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  catalogItems             CatalogItem[]
  customFields             CustomField[]
  estimates                Estimate[]
  estimateLineItems        EstimateLineItem[]
  estimatePayments         EstimatePayment[]
  formLayouts              FormLayout[]
  organizationSettings     OrganizationSettings?
  workflowTemplates        WorkflowTemplate[]
  analyticsMetrics         AnalyticsMetric[]
  auditLogs                AuditLog[]
  clients                  Client[]
  communicationAutomations CommunicationAutomation[]
  communicationChannels    CommunicationChannel[]
  estimateTemplates        EstimateTemplate[]
  leadActivities           LeadActivity[]
  leadSourceConfigs        LeadSourceConfig[]
  leadStages               LeadStage[]
  messageHistory           MessageHistory[]
  messageTemplates         MessageTemplate[]
  projects                 Project[]
  reportTemplates          ReportTemplate[]
  userOrganizations        UserOrganization[]
  users                    User[]
  organizationTheme        OrganizationTheme?
  apiKeys                  ApiKey[]
  leads                    Lead[]
  files                    File[]
  contracts                Contract[]
  comments                 Comment[]
  contractTemplates        ContractTemplate[]

  @@map("organizations")
}

model OrganizationSettings {
  id                String       @id @default(uuid())
  organizationId    String       @unique
  defaultCurrency   String       @default("USD")
  defaultTimeZone   String       @default("UTC")
  defaultDateFormat String       @default("YYYY-MM-DD")
  defaultLanguage   String       @default("en")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  primaryColor      String?      @default("#1976d2")
  secondaryColor    String?      @default("#dc004e")
  accentColor       String?      @default("#f50057")
  logoUrl           String?
  faviconUrl        String?
  companyName       String?
  contactEmail      String?
  contactPhone      String?
  address           Json?
  enabledFeatures   Json?        @default("[\"crm\", \"projects\"]")
  sidebarCollapsed  Boolean?     @default(false)
  darkMode          Boolean?     @default(false)
  language          String?      @default("en")
  timezone          String?      @default("UTC")
  organization      Organization @relation(fields: [organizationId], references: [id])
}

model User {
  id                          String                       @id @default(uuid())
  email                       String                       @unique
  password                    String
  firstName                   String?
  lastName                    String?
  phone                       String?
  avatar                      String?
  role                        UserRole                     @default(USER)
  organizationRole            OrganizationRole             @default(MEMBER)
  isActive                    Boolean                      @default(true)
  lastLoginAt                 DateTime?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  organizationId              String?
  // Security fields
  tokenVersion                Int                          @default(1)
  twoFactorEnabled            Boolean                      @default(false)
  twoFactorSecret             String?
  lastPasswordChange          DateTime?
  failedLoginAttempts         Int                          @default(0)
  accountLockedUntil          DateTime?
  activityLogs                ActivityLog[]
  catalogItems                CatalogItem[]
  clientPortalMessages        ClientPortalMessage[]
  approvedEstimates           Estimate[]                   @relation("EstimateApprover")
  estimates                   Estimate[]                   @relation("EstimateCreator")
  estimateApprovals           EstimateApproval[]
  estimateEmailLogs           EstimateEmailLog[]
  teamChatMessages            TeamChatMessage[]
  userPermissionGrants        UserPermissionGrant[]
  userRoleAssignments         UserRoleAssignment[]
  auditLogs                   AuditLog[]
  assignedLeads               Lead[]                       @relation("LeadAssignee")
  createdAutomations          CommunicationAutomation[]    @relation("AutomationCreator")
  communications              Communication[]
  estimateTemplates           EstimateTemplate[]
  invoices                    Invoice[]
  leadActivities              LeadActivity[]               @relation("LeadActivityUser")
  sentMessages                MessageHistory[]             @relation("SentMessages")
  receivedMessages            MessageHistory[]             @relation("ReceivedMessages")
  createdMessageTemplates     MessageTemplate[]            @relation("CreatedMessageTemplates")
  notes                       Note[]
  notifications               Notification[]
  createdProjects             Project[]                    @relation("ProjectCreator")
  createdReportTemplates      ReportTemplate[]             @relation("ReportTemplateCreator")
  assignedTasks               Task[]
  userNotificationPreferences UserNotificationPreferences?
  userOrganizations           UserOrganization[]
  organization                Organization?                @relation(fields: [organizationId], references: [id])
  assignedProjects            Project[]                    @relation("ProjectAssignee")
  apiKeys                     ApiKey[]
  leads                       Lead[]
  files                       File[]
  contracts                   Contract[]
  comments                    Comment[]

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, role])
  @@index([organizationId, isActive])
  @@index([email])
  @@map("users")
}

model Lead {
  id                   String        @id @default(cuid())
  firstName            String
  lastName             String
  email                String
  phone                String?
  company              String?
  source               LeadSource?
  tags                 String[]
  status               ClientStatus  @default(ACTIVE)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  organizationId       String
  assignedUserId       String?
  leadScore            Int?
  lastContactedAt      DateTime?
  nextFollowUpAt       DateTime?
  estimatedValue       Decimal?      @db.Decimal(10, 2)
  organization         Organization  @relation(fields: [organizationId], references: [id])
  assignedUser         User?         @relation("LeadAssignee", fields: [assignedUserId], references: [id])
  user                 User?         @relation(fields: [userId], references: [id])
  userId               String?

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([organizationId, source])
  @@index([organizationId, assignedUserId])
  @@index([organizationId, nextFollowUpAt])
  @@index([organizationId, leadScore])
  @@map("leads")
}

model UserOrganization {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  isActive       Boolean          @default(true)
  joinedAt       DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([organizationId, role])
  @@index([userId, isActive])
  @@map("user_organizations")
}

model Client {
  id                   String                @id @default(cuid())
  firstName            String
  lastName             String
  email                String
  phone                String?
  company              String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  password             String
  noteText             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  actualValue          Decimal?              @db.Decimal(10, 2)
  clientPortalMessages ClientPortalMessage[]
  estimates            Estimate[]
  organization         Organization          @relation(fields: [organizationId], references: [id])
  communications       Communication[]
  invoices             Invoice[]
  leadActivities       LeadActivity[]
  messageHistory       MessageHistory[]
  notes                Note[]
  projects             Project[]
  contracts            Contract[]

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, createdAt])
  @@map("clients")
}

model Project {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  status               ProjectStatus         @default(PLANNING)
  stage                ProjectStage          @default(INITIAL_CONTACT)
  startDate            DateTime?
  endDate              DateTime?
  budget               Decimal?              @db.Decimal(10, 2)
  actualCost           Decimal?              @db.Decimal(10, 2)
  location             String?
  priority             Priority              @default(MEDIUM)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  clientId             String
  creatorId            String
  clientPortalMessages ClientPortalMessage[]
  estimates            Estimate[]
  teamChatMessages     TeamChatMessage[]
  changeOrders         ChangeOrder[]
  communications       Communication[]
  documents            Document[]
  invoices             Invoice[]
  messageHistory       MessageHistory[]
  notes                Note[]
  client               Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  creator              User                  @relation("ProjectCreator", fields: [creatorId], references: [id])
  organization         Organization          @relation(fields: [organizationId], references: [id])
  tasks                Task[]
  assignees            User[]                @relation("ProjectAssignee")

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, stage])
  @@index([organizationId, priority])
  @@index([organizationId, isActive])
  @@index([organizationId, createdAt])
  @@index([clientId, organizationId])
  @@map("projects")
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus      @default(PENDING)
  priority       Priority        @default(MEDIUM)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Decimal?        @db.Decimal(5, 2)
  actualHours    Decimal?        @db.Decimal(5, 2)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectId      String
  assigneeId     String?
  checklist      ChecklistItem[]
  assignee       User?           @relation(fields: [assigneeId], references: [id])
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeLogs       TimeLog[]

  @@index([projectId])
  @@index([projectId, status])
  @@index([projectId, priority])
  @@index([projectId, dueDate])
  @@index([assigneeId])
  @@map("tasks")
}

model ChecklistItem {
  id          String    @id @default(cuid())
  title       String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int
  createdAt   DateTime  @default(now())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model TimeLog {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

model Estimate {
  id                String             @id @default(cuid())
  referenceNumber   String
  title             String
  description       String?
  status            EstimateStatus     @default(DRAFT)
  organizationId    String
  clientId          String
  projectId         String?
  creatorId         String
  approvedById      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  expiresAt         DateTime?
  approvedAt        DateTime?
  sentAt            DateTime?
  subtotal          Decimal            @default(0) @db.Decimal(10, 2)
  taxRate           Decimal            @default(0) @db.Decimal(5, 2)
  taxAmount         Decimal            @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal            @default(0) @db.Decimal(10, 2)
  requiresApproval  Boolean            @default(false)
  isTemplate        Boolean            @default(false)
  templateName      String?
  templateId        String?
  pdfPath           String?
  pdfGeneratedAt    DateTime?
  paymentTerms      String?
  depositRequired   Boolean            @default(false)
  depositAmount     Decimal?           @db.Decimal(10, 2)
  depositPercentage Decimal?           @db.Decimal(5, 2)
  approvedBy        User?              @relation("EstimateApprover", fields: [approvedById], references: [id])
  client            Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  creator           User               @relation("EstimateCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project           Project?           @relation(fields: [projectId], references: [id])
  template          EstimateTemplate?  @relation(fields: [templateId], references: [id])
  approvals         EstimateApproval[]
  emailLogs         EstimateEmailLog[]
  lineItems         EstimateLineItem[]
  payments          EstimatePayment[]
  contracts         Contract[]
  comments          Comment[]
  files             File[]

  @@unique([referenceNumber, organizationId])
  @@index([organizationId, status])
  @@index([clientId])
  @@index([creatorId])
}

model EstimateLineItem {
  id             String       @id @default(cuid())
  estimateId     String
  itemName       String
  description    String?
  sku            String?
  category       String?
  room           String?
  quantity       Decimal      @db.Decimal(10, 2)
  unit           String       @default("ea")
  unitCost       Decimal      @db.Decimal(10, 2)
  markup         Decimal      @default(0) @db.Decimal(5, 2)
  unitPrice      Decimal      @db.Decimal(10, 2)
  lineTotal      Decimal      @db.Decimal(10, 2)
  taxable        Boolean      @default(true)
  taxRate        Decimal?     @db.Decimal(5, 2)
  organizationId String
  sortOrder      Int          @default(0)
  catalogItemId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  catalogItem    CatalogItem? @relation(fields: [catalogItemId], references: [id])
  estimate       Estimate     @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@index([catalogItemId])
}

model CatalogItem {
  id             String             @id @default(cuid())
  organizationId String
  name           String
  description    String?
  sku            String?
  category       String?
  defaultCost    Decimal            @db.Decimal(10, 2)
  defaultMarkup  Decimal            @default(0) @db.Decimal(5, 2)
  defaultPrice   Decimal            @db.Decimal(10, 2)
  unit           String             @default("ea")
  isActive       Boolean            @default(true)
  taxable        Boolean            @default(true)
  usageCount     Int                @default(0)
  lastUsed       DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  createdById    String
  createdBy      User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  lineItems      EstimateLineItem[]

  @@unique([sku, organizationId])
  @@index([organizationId, category])
  @@index([organizationId, isActive])
}

model EstimateApproval {
  id           String         @id @default(cuid())
  estimateId   String
  status       ApprovalStatus
  comments     String?
  approvedById String
  createdAt    DateTime       @default(now())
  approvedBy   User           @relation(fields: [approvedById], references: [id], onDelete: Cascade)
  estimate     Estimate       @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@index([estimateId])
}

model EstimatePayment {
  id              String        @id @default(cuid())
  estimateId      String
  amount          Decimal       @db.Decimal(10, 2)
  paymentType     PaymentType
  status          PaymentStatus @default(PENDING)
  dueDate         DateTime?
  paidDate        DateTime?
  stripePaymentId String?
  paymentMethod   String?
  organizationId  String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  estimate        Estimate      @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@index([organizationId, status])
}

model EstimateEmailLog {
  id         String   @id @default(cuid())
  estimateId String
  toEmail    String
  subject    String
  sentAt     DateTime @default(now())
  sentById   String
  delivered  Boolean  @default(false)
  opened     Boolean  @default(false)
  clicked    Boolean  @default(false)
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  sentBy     User     @relation(fields: [sentById], references: [id], onDelete: Cascade)

  @@index([estimateId])
}

model EstimateTemplate {
  id             String                     @id @default(cuid())
  name           String
  description    String?
  category       String?
  isDefault      Boolean                    @default(false)
  taxRate        Decimal                    @default(0) @db.Decimal(5, 4)
  terms          String?
  notes          String?
  isActive       Boolean                    @default(true)
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  organizationId String
  creatorId      String
  estimates      Estimate[]
  lineItems      EstimateTemplateLineItem[]
  creator        User                       @relation(fields: [creatorId], references: [id])
  organization   Organization               @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([organizationId, category])
  @@map("estimate_templates")
}

model EstimateTemplateLineItem {
  id           String           @id @default(cuid())
  description  String
  serviceType  String?
  category     String?
  quantity     Decimal          @default(1) @db.Decimal(10, 3)
  unitPrice    Decimal          @db.Decimal(10, 2)
  laborHours   Decimal?         @db.Decimal(8, 2)
  materialCost Decimal?         @db.Decimal(10, 2)
  markup       Decimal?         @db.Decimal(5, 2)
  order        Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  templateId   String
  template     EstimateTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([templateId, order])
  @@map("estimate_template_line_items")
}

model Contract {
  id             String   @id @default(cuid())
  data           Json
  url            String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  estimateId     String
  estimate       Estimate @relation(fields: [estimateId], references: [id])
  clientId       String
  client         Client   @relation(fields: [clientId], references: [id])
  comments       Comment[]
  files          File[]

  @@map("contracts")
}

model Comment {
  id          String   @id @default(cuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  estimateId  String?
  estimate    Estimate? @relation(fields: [estimateId], references: [id])
  contractId  String?
  contract    Contract? @relation(fields: [contractId], references: [id])
  organizationId String?
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("comments")
}

model ContractTemplate {
  id             String   @id @default(cuid())
  name           String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("contract_templates")
}

model Invoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  title         String
  description   String?
  amount        Decimal        @db.Decimal(10, 2)
  taxAmount     Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount   Decimal        @db.Decimal(10, 2)
  status        InvoiceStatus  @default(DRAFT)
  dueDate       DateTime?
  paidAt        DateTime?
  paymentMethod PaymentMethod?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectId     String
  clientId      String
  creatorId     String
  client        Client         @relation(fields: [clientId], references: [id])
  creator       User           @relation(fields: [creatorId], references: [id])
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@index([clientId])
  @@index([projectId])
  @@index([clientId, status])
  @@index([projectId, status])
  @@index([dueDate])
  @@index([createdAt])
  @@map("invoices")
}

model Payment {
  id        String   @id @default(cuid())
  stripeId  String   @unique
  amount    Int
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Document {
  id         String       @id @default(cuid())
  name       String
  type       DocumentType
  url        String
  size       Int
  mimeType   String
  uploadedAt DateTime     @default(now())
  projectId  String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
  @@index([uploadedAt])
  @@map("documents")
}

model Communication {
  id             String                 @id @default(cuid())
  type           CommunicationType
  subject        String?
  content        String
  direction      CommunicationDirection @default(OUTBOUND)
  emailSubject   String?
  emailBody      String?
  smsBody        String?
  deliveryStatus String?                @default("PENDING")
  projectId      String?
  clientId       String
  userId         String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  client         Client                 @relation(fields: [clientId], references: [id])
  project        Project?               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User?                  @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([clientId, type])
  @@index([clientId, createdAt])
  @@index([projectId])
  @@index([userId])
  @@map("communications")
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?
  clientId  String?
  userId    String
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([projectId])
  @@index([userId])
  @@index([clientId, isPrivate])
  @@index([projectId, isPrivate])
  @@map("notes")
}

model ChangeOrder {
  id          String            @id @default(cuid())
  title       String
  description String
  amount      Decimal           @db.Decimal(10, 2)
  status      ChangeOrderStatus @default(PENDING)
  approvedAt  DateTime?
  approvedBy  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  projectId   String
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, status])
  @@index([createdAt])
  @@map("change_orders")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, isRead])
  @@index([userId, type])
  @@index([createdAt])
  @@map("notifications")
}

model UserNotificationPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  smsNotifications      Boolean  @default(false)
  pushNotifications     Boolean  @default(true)
  inAppNotifications    Boolean  @default(true)
  taskDueNotifications  Boolean  @default(true)
  projectUpdateNotifications Boolean @default(true)
  invoiceDueNotifications Boolean @default(true)
  estimateAcceptedNotifications Boolean @default(true)
  estimateRejectedNotifications Boolean @default(true)
  paymentReceivedNotifications Boolean @default(true)
  systemAlertNotifications Boolean @default(true)
  inactivityReminderNotifications Boolean @default(true)
  dailyDigestEnabled    Boolean  @default(false)
  weeklyDigestEnabled   Boolean  @default(false)
  digestTime            String   @default("09:00")
  quietHoursEnabled     Boolean  @default(false)
  quietHoursStart       String   @default("22:00")
  quietHoursEnd         String   @default("08:00")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model OrganizationTheme {
  id            String   @id @default(cuid())
  organizationId String  @unique
  primaryColor  String   @default("#1976d2")
  secondaryColor String  @default("#dc004e")
  accentColor   String   @default("#f50057")
  logoUrl       String?
  companyName   String?
  darkMode      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_themes")
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model TeamChatMessage {
  id        String          @id @default(cuid())
  content   String
  type      ChatMessageType @default(TEXT)
  isEdited  Boolean         @default(false)
  editedAt  DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  projectId String
  userId    String
  fileUrl   String?
  fileName  String?
  fileType  String?
  project   Project         @relation(fields: [projectId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model ClientPortalMessage {
  id        String    @id @default(cuid())
  content   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clientId  String
  userId    String
  projectId String?
  client    Client    @relation(fields: [clientId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([projectId])
}

model LeadStage {
  id             String       @id @default(cuid())
  name           String
  description    String?
  color          String?      @default("#1976d2")
  order          Int
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name])
  @@index([organizationId])
  @@map("lead_stages")
}

model LeadSourceConfig {
  id             String       @id @default(cuid())
  name           String
  description    String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name])
  @@index([organizationId])
  @@map("lead_source_configs")
}

model LeadActivity {
  id             String           @id @default(cuid())
  type           LeadActivityType
  title          String
  description    String?
  outcome        String?
  nextAction     String?
  duration       Int?
  scheduledAt    DateTime?
  completedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  clientId       String
  userId         String
  client         Client           @relation(fields: [clientId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])
  user           User             @relation("LeadActivityUser", fields: [userId], references: [id])
  messageHistory MessageHistory[]

  @@index([organizationId])
  @@index([clientId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("lead_activities")
}

model MessageTemplate {
  id             String   @id @default(cuid())
  name           String
  subject        String
  body           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  creatorId      String
  creator        User     @relation("CreatedMessageTemplates", fields: [creatorId], references: [id])
  communicationAutomations CommunicationAutomation[]

  @@map("message_templates")
}

model CommunicationChannel {
  id                       String                    @id @default(cuid())
  name                     String
  type                     CommunicationType
  isActive                 Boolean                   @default(true)
  isDefault                Boolean                   @default(false)
  config                   Json?
  priority                 Int                       @default(1)
  dailyLimit               Int?
  monthlyLimit             Int?
  currentDaily             Int                       @default(0)
  currentMonthly           Int                       @default(0)
  organizationId           String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  communicationAutomations CommunicationAutomation[]
  organization             Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messageHistory           MessageHistory[]

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, type])
  @@index([organizationId, isActive])
  @@index([organizationId, isDefault])
  @@map("communication_channels")
}

model MessageHistory {
  id             String   @id @default(cuid())
  subject        String
  body           String
  sentAt         DateTime @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  senderId       String
  sender         User     @relation("SentMessages", fields: [senderId], references: [id])
  recipientId    String
  recipient      User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  clientId       String?
  client         Client?  @relation(fields: [clientId], references: [id])
  projectId      String?
  project        Project? @relation(fields: [projectId], references: [id])
  leadActivityId String?
  leadActivity   LeadActivity? @relation(fields: [leadActivityId], references: [id])
  channelId      String?
  channel        CommunicationChannel? @relation(fields: [channelId], references: [id])

  @@map("message_history")
}

model CommunicationAutomation {
  id             String                @id @default(cuid())
  name           String
  description    String?
  isActive       Boolean               @default(true)
  triggerType    AutomationTriggerType
  triggerConfig  Json?
  conditions     Json?
  templateId     String?
  channelId      String?
  delay          Int                   @default(0)
  organizationId String
  createdById    String
  executionCount Int                   @default(0)
  lastExecutedAt DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  channel        CommunicationChannel? @relation(fields: [channelId], references: [id])
  createdBy      User                  @relation("AutomationCreator", fields: [createdById], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  template       MessageTemplate?      @relation(fields: [templateId], references: [id])

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([organizationId, triggerType])
  @@map("communication_automations")
}

model Role {
  id          String               @id @default(uuid())
  name        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  permissions RolePermission[]
  userRoles   UserRoleAssignment[]
}

model Permission {
  id              String                @id @default(uuid())
  module          String
  action          String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  description     String?
  rolePermissions RolePermission[]
  userGrants      UserPermissionGrant[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model UserRoleAssignment {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model UserPermissionGrant {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CustomField {
  id              String       @id @default(uuid())
  organizationId  String
  entityType      String
  fieldName       String
  fieldType       String
  isRequired      Boolean      @default(false)
  validationRules Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, entityType, fieldName])
}

model FormLayout {
  id             String       @id @default(uuid())
  organizationId String
  entityType     String
  layout         Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, entityType])
}

model WorkflowTemplate {
  id             String       @id @default(uuid())
  organizationId String
  name           String
  description    String?
  triggers       Json
  actions        Json
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model ReportTemplate {
  id             String       @id @default(uuid())
  name           String
  description    String?
  reportType     ReportType
  config         Json
  isDefault      Boolean      @default(false)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  createdBy      String
  creator        User         @relation("ReportTemplateCreator", fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([organizationId, reportType])
  @@index([organizationId, isActive])
  @@map("report_templates")
}

model AnalyticsMetric {
  id             String              @id @default(cuid())
  metricKey      String
  metricName     String
  metricValue    Decimal             @db.Decimal(15, 4)
  metricType     AnalyticsMetricType
  dimension      String?
  periodStart    DateTime?
  periodEnd      DateTime?
  calculatedAt   DateTime            @default(now())
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, metricKey, dimension, periodStart])
  @@index([organizationId])
  @@index([organizationId, metricType])
  @@index([organizationId, periodStart])
  @@map("analytics_metrics")
}

model File {
  id             String    @id @default(cuid())
  name           String
  url            String
  size           Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  estimateId     String?
  estimate       Estimate? @relation(fields: [estimateId], references: [id])
  contractId     String?
  contract       Contract? @relation(fields: [contractId], references: [id])

  @@map("files")
}

model AuditLog {
  id             String        @id @default(uuid())
  userId         String?
  organizationId String?
  action         String
  targetType     String?
  targetId       String?
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([action])
  @@map("audit_logs")
}

model ApiKey {
  id             String           @id @default(uuid())
  name           String
  key            String           @unique
  userId         String
  organizationId String?
  permissions    String[]         @default([])
  isActive       Boolean          @default(true)
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([key])
  @@index([isActive])
  @@map("api_keys")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  USER
  VIEWER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISING
  COLD_CALL
  OTHER
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  LOST
  QUALIFIED
  CONVERTED
  UNQUALIFIED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectStage {
  INITIAL_CONTACT
  ESTIMATE_REQUESTED
  ESTIMATE_SENT
  CONTRACT_SIGNED
  DEMO_SCHEDULED
  DEMO_COMPLETED
  INSTALLATION_SCHEDULED
  INSTALLATION_IN_PROGRESS
  INSTALLATION_COMPLETED
  FINAL_INSPECTION
  PROJECT_COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EstimateStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  PENDING_APPROVAL
  APPROVED
  VIEWED
  CONVERTED
}

enum DiscountType {
  NONE
  PERCENTAGE
  FIXED_AMOUNT
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  STRIPE
  OTHER
}

enum DocumentType {
  BLUEPRINT
  PHOTO
  CONTRACT
  INVOICE
  ESTIMATE
  OTHER
}

enum CommunicationType {
  EMAIL
  SMS
  PHONE
  IN_PERSON
  OTHER
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
}

enum ChangeOrderStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum NotificationType {
  TASK_DUE
  PROJECT_UPDATE
  INVOICE_DUE
  ESTIMATE_ACCEPTED
  ESTIMATE_REJECTED
  PAYMENT_RECEIVED
  SYSTEM_ALERT
  INACTIVITY_REMINDER
}

enum ChatMessageType {
  TEXT
  FILE
  IMAGE
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum PaymentType {
  DEPOSIT
  MILESTONE
  FINAL
  FULL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum LeadActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  STAGE_CHANGE
  DEMO
  QUOTE_SENT
  FOLLOW_UP
  CONVERSION
  OTHER
  TASK
}

enum MessageTemplateCategory {
  WELCOME
  FOLLOW_UP
  PROPOSAL
  REMINDER
  THANK_YOU
  MARKETING
  SUPPORT
  INVOICE
  ESTIMATE
  PROJECT_UPDATE
  LEAD_NURTURE
  APPOINTMENT
  CUSTOM
}

enum MessageStatus {
  PENDING
  QUEUED
  SENDING
  SENT
  DELIVERED
  READ
  CLICKED
  FAILED
  BOUNCED
  SPAM
  UNSUBSCRIBED
}

enum AutomationTriggerType {
  LEAD_CREATED
  LEAD_STAGE_CHANGED
  LEAD_ASSIGNED
  FOLLOW_UP_DUE
  LEAD_INACTIVE
  PROJECT_STATUS_CHANGED
  ESTIMATE_SENT
  ESTIMATE_VIEWED
  ESTIMATE_APPROVED
  ESTIMATE_EXPIRED
  INVOICE_SENT
  PAYMENT_RECEIVED
  CUSTOM_DATE
  CUSTOM_FIELD_CHANGED
}

enum ReportType {
  LEAD_PIPELINE
  LEAD_CONVERSION
  REVENUE_ANALYTICS
  USER_PERFORMANCE
  PROJECT_ANALYTICS
  ESTIMATE_ANALYTICS
  COMMUNICATION_METRICS
  CUSTOM_REPORT
}

enum AnalyticsMetricType {
  COUNT
  SUM
  AVERAGE
  PERCENTAGE
  RATIO
  GROWTH_RATE
}
