generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String             @id @default(cuid())
  name             String
  code             String             @unique
  logo             String?
  primaryColor     String?
  settings         Json?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  users            User[]
  clients          Client[]
  projects         Project[]
  estimates        Estimate[]
  estimateTemplates EstimateTemplate[]
  userOrganizations UserOrganization[]
  organizationSettings OrganizationSettings?

  @@map("organizations")
}

model OrganizationSettings {
  id              String       @id @default(cuid())
  organizationId  String       @unique
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Theme settings
  primaryColor    String?      @default("#1976d2")
  secondaryColor  String?      @default("#dc004e")
  accentColor     String?      @default("#f50057")
  logoUrl         String?
  faviconUrl      String?
  
  // Branding settings
  companyName     String?
  contactEmail    String?
  contactPhone    String?
  address         Json?
  
  // Feature flags
  enabledFeatures Json?        @default("[\"crm\", \"projects\"]")
  
  // UI preferences
  sidebarCollapsed Boolean?    @default(false)
  darkMode        Boolean?     @default(false)
  language        String?      @default("en")
  timezone        String?      @default("UTC")
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("organization_settings")
}

model User {
  id                   String                @id @default(cuid())
  email                String
  password             String
  firstName            String
  lastName             String
  phone                String?
  avatar               String?
  role                 UserRole              @default(USER)
  organizationRole     OrganizationRole      @default(MEMBER)
  isActive             Boolean               @default(true)
  lastLoginAt          DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  organization         Organization          @relation(fields: [organizationId], references: [id])
  userOrganizations    UserOrganization[]
  clientPortalMessages ClientPortalMessage[]
  teamChatMessages     TeamChatMessage[]
  communications       Communication[]
  estimates            Estimate[]
  estimateTemplates    EstimateTemplate[]
  invoices             Invoice[]
  notes                Note[]
  notifications        Notification[]
  createdProjects      Project[]             @relation("ProjectCreator")
  assignedTasks        Task[]
  assignedProjects     Project[]             @relation("ProjectAssignee")

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, role])
  @@index([organizationId, isActive])
  @@index([email])
  @@map("users")
}

model UserOrganization {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  isActive       Boolean          @default(true)
  joinedAt       DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([organizationId, role])
  @@index([userId, isActive])
  @@map("user_organizations")
}

model Client {
  id                   String                @id @default(cuid())
  firstName            String
  lastName             String
  email                String
  phone                String?
  company              String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  source               LeadSource?
  tags                 String[]
  status               ClientStatus          @default(ACTIVE)
  noteText             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  organization         Organization          @relation(fields: [organizationId], references: [id])
  clientPortalMessages ClientPortalMessage[]
  communications       Communication[]
  estimates            Estimate[]
  invoices             Invoice[]
  notes                Note[]
  projects             Project[]

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([organizationId, source])
  @@map("clients")
}

model Project {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  status               ProjectStatus         @default(PLANNING)
  stage                ProjectStage          @default(INITIAL_CONTACT)
  startDate            DateTime?
  endDate              DateTime?
  budget               Decimal?              @db.Decimal(10, 2)
  actualCost           Decimal?              @db.Decimal(10, 2)
  location             String?
  priority             Priority              @default(MEDIUM)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  organizationId       String
  organization         Organization          @relation(fields: [organizationId], references: [id])
  clientId             String
  creatorId            String
  clientPortalMessages ClientPortalMessage[]
  teamChatMessages     TeamChatMessage[]
  changeOrders         ChangeOrder[]
  communications       Communication[]
  documents            Document[]
  estimates            Estimate[]
  invoices             Invoice[]
  notes                Note[]
  client               Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  creator              User                  @relation("ProjectCreator", fields: [creatorId], references: [id])
  tasks                Task[]
  assignees            User[]                @relation("ProjectAssignee")

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, stage])
  @@index([organizationId, priority])
  @@index([organizationId, isActive])
  @@index([organizationId, createdAt])
  @@index([clientId, organizationId])
  @@map("projects")
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus      @default(PENDING)
  priority       Priority        @default(MEDIUM)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Decimal?        @db.Decimal(5, 2)
  actualHours    Decimal?        @db.Decimal(5, 2)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectId      String
  assigneeId     String?
  checklist      ChecklistItem[]
  assignee       User?           @relation(fields: [assigneeId], references: [id])
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeLogs       TimeLog[]

  @@index([projectId])
  @@index([projectId, status])
  @@index([projectId, priority])
  @@index([projectId, dueDate])
  @@index([assigneeId])
  @@map("tasks")
}

model ChecklistItem {
  id          String    @id @default(cuid())
  title       String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  order       Int
  createdAt   DateTime  @default(now())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model TimeLog {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

model Estimate {
  id              String             @id @default(cuid())
  estimateNumber  String             @unique
  title           String
  description     String?
  subtotal        Decimal            @default(0) @db.Decimal(10, 2)
  taxRate         Decimal            @default(0) @db.Decimal(5, 4)
  taxAmount       Decimal            @default(0) @db.Decimal(10, 2)
  discountType    DiscountType       @default(NONE)
  discountValue   Decimal            @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal            @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal            @default(0) @db.Decimal(10, 2)
  status          EstimateStatus     @default(DRAFT)
  validUntil      DateTime?
  sentAt          DateTime?
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  terms           String?
  notes           String?
  templateId      String?
  portalUrl       String?            @unique
  portalToken     String?            @unique
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  organizationId  String
  projectId       String?
  clientId        String
  creatorId       String
  organization    Organization       @relation(fields: [organizationId], references: [id])
  client          Client             @relation(fields: [clientId], references: [id])
  creator         User               @relation(fields: [creatorId], references: [id])
  project         Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template        EstimateTemplate?  @relation(fields: [templateId], references: [id])
  contracts       Contract[]
  lineItems       EstimateLineItem[]

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([clientId])
  @@index([projectId])
  @@index([clientId, status])
  @@index([projectId, status])
  @@index([createdAt])
  @@index([templateId])
  @@map("estimates")
}

model EstimateLineItem {
  id           String   @id @default(cuid())
  description  String
  serviceType  String?
  category     String?
  quantity     Decimal  @db.Decimal(10, 3)
  unitPrice    Decimal  @db.Decimal(10, 2)
  totalPrice   Decimal  @db.Decimal(10, 2)
  laborHours   Decimal? @db.Decimal(8, 2)
  materialCost Decimal? @db.Decimal(10, 2)
  markup       Decimal? @db.Decimal(5, 2)
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  estimateId   String
  estimate     Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@index([estimateId])
  @@index([estimateId, order])
  @@map("estimate_line_items")
}

model EstimateTemplate {
  id             String                     @id @default(cuid())
  name           String
  description    String?
  category       String?
  isDefault      Boolean                    @default(false)
  taxRate        Decimal                    @default(0) @db.Decimal(5, 4)
  terms          String?
  notes          String?
  isActive       Boolean                    @default(true)
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  organizationId String
  creatorId      String
  organization   Organization               @relation(fields: [organizationId], references: [id])
  creator        User                       @relation(fields: [creatorId], references: [id])
  estimates      Estimate[]
  lineItems      EstimateTemplateLineItem[]

  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([organizationId, category])
  @@map("estimate_templates")
}

model EstimateTemplateLineItem {
  id           String           @id @default(cuid())
  description  String
  serviceType  String?
  category     String?
  quantity     Decimal          @default(1) @db.Decimal(10, 3)
  unitPrice    Decimal          @db.Decimal(10, 2)
  laborHours   Decimal?         @db.Decimal(8, 2)
  materialCost Decimal?         @db.Decimal(10, 2)
  markup       Decimal?         @db.Decimal(5, 2)
  order        Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  templateId   String
  template     EstimateTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([templateId, order])
  @@map("estimate_template_line_items")
}

model Contract {
  id         String         @id @default(cuid())
  title      String
  content    String
  status     ContractStatus @default(DRAFT)
  signedAt   DateTime?
  signedBy   String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  estimateId String
  estimate   Estimate       @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Invoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  title         String
  description   String?
  amount        Decimal        @db.Decimal(10, 2)
  taxAmount     Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount   Decimal        @db.Decimal(10, 2)
  status        InvoiceStatus  @default(DRAFT)
  dueDate       DateTime?
  paidAt        DateTime?
  paymentMethod PaymentMethod?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectId     String
  clientId      String
  creatorId     String
  client        Client         @relation(fields: [clientId], references: [id])
  creator       User           @relation(fields: [creatorId], references: [id])
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@index([clientId])
  @@index([projectId])
  @@index([clientId, status])
  @@index([projectId, status])
  @@index([dueDate])
  @@index([createdAt])
  @@map("invoices")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Document {
  id         String       @id @default(cuid())
  name       String
  type       DocumentType
  url        String
  size       Int
  mimeType   String
  uploadedAt DateTime     @default(now())
  projectId  String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
  @@index([uploadedAt])
  @@map("documents")
}

model Communication {
  id             String                 @id @default(cuid())
  type           CommunicationType
  subject        String?
  content        String
  direction      CommunicationDirection @default(OUTBOUND)
  emailSubject   String?
  emailBody      String?
  smsBody        String?
  deliveryStatus String?                @default("PENDING")
  projectId      String?
  clientId       String
  userId         String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  client         Client                 @relation(fields: [clientId], references: [id])
  project        Project?               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User?                  @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([clientId, type])
  @@index([clientId, createdAt])
  @@index([projectId])
  @@index([userId])
  @@map("communications")
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?
  clientId  String?
  userId    String
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([projectId])
  @@index([userId])
  @@index([clientId, isPrivate])
  @@index([projectId, isPrivate])
  @@map("notes")
}

model ChangeOrder {
  id          String            @id @default(cuid())
  title       String
  description String
  amount      Decimal           @db.Decimal(10, 2)
  status      ChangeOrderStatus @default(PENDING)
  approvedAt  DateTime?
  approvedBy  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  projectId   String
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, status])
  @@index([createdAt])
  @@map("change_orders")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, isRead])
  @@index([userId, type])
  @@index([createdAt])
  @@map("notifications")
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model TeamChatMessage {
  id        String          @id @default(cuid())
  content   String
  type      ChatMessageType @default(TEXT)
  isEdited  Boolean         @default(false)
  editedAt  DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  projectId String
  userId    String
  fileUrl   String?
  fileName  String?
  fileType  String?
  project   Project         @relation(fields: [projectId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model ClientPortalMessage {
  id        String    @id @default(cuid())
  content   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clientId  String
  userId    String
  projectId String?
  client    Client    @relation(fields: [clientId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([projectId])
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISING
  COLD_CALL
  OTHER
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  LOST
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectStage {
  INITIAL_CONTACT
  ESTIMATE_REQUESTED
  ESTIMATE_SENT
  CONTRACT_SIGNED
  DEMO_SCHEDULED
  DEMO_COMPLETED
  INSTALLATION_SCHEDULED
  INSTALLATION_IN_PROGRESS
  INSTALLATION_COMPLETED
  FINAL_INSPECTION
  PROJECT_COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EstimateStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum DiscountType {
  NONE
  PERCENTAGE
  FIXED_AMOUNT
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  STRIPE
  OTHER
}

enum DocumentType {
  BLUEPRINT
  PHOTO
  CONTRACT
  INVOICE
  ESTIMATE
  OTHER
}

enum CommunicationType {
  EMAIL
  SMS
  PHONE
  IN_PERSON
  OTHER
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
}

enum ChangeOrderStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum NotificationType {
  TASK_DUE
  PROJECT_UPDATE
  INVOICE_DUE
  ESTIMATE_ACCEPTED
  ESTIMATE_REJECTED
  PAYMENT_RECEIVED
  SYSTEM_ALERT
}

enum ChatMessageType {
  TEXT
  FILE
  IMAGE
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}
