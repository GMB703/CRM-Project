---
description: 
globs: 
alwaysApply: true
---
---
description: Project-wide guardrails for secure, repeatable, high-quality automation
globs: []          # apply to every prompt in this repo
alwaysApply: true
---

<!-- ───── TASK DEFINITION ───── -->
- **Define the task in ≤ 1 sentence** (imperative).
- **Enumerate success criteria** (files, artifacts, tests, perf targets).

<!-- ───── ENVIRONMENT & DEPENDENCIES ───── -->
- **Pin all dependencies** to exact versions; commit lockfiles.
- **Run in an isolated environment** (fresh venv/container/nix shell).
- **Scan dependencies for CVEs & license issues** (e.g., `npm audit`, `pip-audit`, `syft`).
- **Set CPU, memory, and wall-clock limits**; abort on overrun.
- **Seed RNGs** for deterministic outputs.

<!-- ───── CODE HEALTH & QUALITY ───── -->
- **Auto-format code** (`prettier`, `black`, `go fmt`, etc.).
- **Run static analysis / linters**; fail on critical issues.
- **Enforce ≥ 80 % unit-test coverage**; block merge below threshold.
- **Run integration & E2E tests** in CI before deploy.
- **Use mutation or fuzz testing** on security-critical modules.
- **Document public interfaces** with docstrings / JSDoc and update `docs/architecture.md`.

<!-- ───── SECURITY & DATA PROTECTION ───── -->
- **Never embed secrets**; reference `${ENV_VAR}` placeholders.
- **Secrets scanning before commit** (`gitleaks`, `truffleHog`); fail on hits.
- **Encrypt sensitive data in transit & at rest**; default to TLS 1.2+.
- **Validate & sanitize external input** (CLI args, HTTP params, file paths, SQL).
- **Restrict outbound network calls** to whitelisted domains.
- **Restrict filesystem writes** to the workspace unless success criteria require otherwise.

<!-- ───── SAFE EXECUTION & RECOVERY ───── -->
- **Require `--dry-run` for destructive operations**; show plan/diff first.
- **Gate critical steps with explicit confirmation** (`--force` or “CONFIRM”).
- **Idempotent tasks**—re-running must not corrupt state.
- **Automatic rollback on failure** (files, DB migrations, infra).
- **Blue/green or canary strategy** for production releases.

<!-- ───── AUDIT & GOVERNANCE ───── -->
- **Log in structured JSON** (`stdout` or `./logs/`); include trace IDs.
- **Emit non-zero exit codes on errors** plus a concise summary.
- **Commit to a signed† branch** (`<task>-auto`); never push directly to `main`.  
  †`git commit -S` required.
- **Require ≥ 1 human reviewer** for PR merge to production.
- **Tag releases and generate SBOM** (`cyclonedx`, `spdx`) for supply-chain attestation.
